{"version":3,"sources":["components/Stack/tree/prolog.js","components/Stack/tree/line.js","components/Stack/tree/stacktrace.js","data/stack/index.js","components/Stack/tree/index.js","restService/restApiCaller.js","App.js","serviceWorker.ts","index.js"],"names":["Prolog","props","useState","prolog","type","content","className","description","Line","line","packageName","methodName","lineNumber","StackTrace","trace","filter","console","log","stackTraceLines","style","color","length","map","l","causedBy","stackTrace","FileSystemNavigator","st","stacks","setStacks","input","setInput","setFilter","filterAsProps","setFilterAsProps","callApi","callback","requestOptions","method","body","JSON","stringify","headers","fetch","then","res","json","data","post","rawStackTrace","value","onChange","event","target","rows","id","onClick","placeholder","open","visible","springConfig","from","height","opacity","transform","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3a09797.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport Tree from 'react-animated-tree'\r\n\r\n\r\n function Prolog(props) {\r\n    const [prolog, ] = useState(props.prolog || {})\r\n\r\n     return <Tree type=\"\" content={<span className=\"text-wrap prolog\">{prolog.description}</span>}>\r\n        {prolog.prolog && <span> <Prolog prolog={prolog.prolog}/></span>}\r\n    </Tree>\r\n\r\n}\r\nexport default Prolog\r\n","import React, {useState} from \"react\";\r\nimport './style.scss';\r\n\r\nfunction Line(props) {\r\n    const [line,] = useState(props.line || {});\r\n    return <div>\r\n\r\n    <span>\r\n        <span className={\"package\"}>{line.packageName}.</span>\r\n        <span className={\"class\"}>{line.className}.</span>\r\n        <span className={\"method\"}>{line.methodName} : </span>\r\n        <span className={\"number\"}>{line.lineNumber}</span>\r\n\r\n    </span>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Line;\r\n","import React from \"react\";\r\nimport Prolog from \"./prolog\";\r\nimport Tree from \"react-animated-tree\";\r\nimport Line from \"./line\";\r\n\r\nfunction StackTrace(props) {\r\n    const {trace} = props;\r\n    const {filter} = props;\r\n    console.log(filter);\r\n\r\n    return (<span>\r\n            {trace.prolog && <Prolog prolog={trace.prolog}/>}\r\n            {trace.stackTraceLines &&\r\n\r\n            <Tree style={{ color: \"#f83737\" }}\r\n                  content={<span className={\"package\"}>{trace.stackTraceLines.length + \" LINES\" + (filter ? \" filtered with '\"+filter+\"'\" : \"\")}\r\n            </span>}>\r\n                {(trace.stackTraceLines.map(l =>\r\n                    <Line line={l}/>\r\n                ))}</Tree>}\r\n\r\n\r\n            {trace.causedBy &&\r\n            <Tree content={<span className={\"package\"}>CAUSED BY</span>}>\r\n                <StackTrace trace={trace.causedBy} filter ={filter}/></Tree>}\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\nexport default StackTrace;\r\n","const stackTrace = {}\r\nexport default stackTrace;\r\n","import React, {useState} from 'react';\r\nimport './style.scss';\r\nimport Tree from \"react-animated-tree\";\r\nimport StackTrace from \"./stacktrace\";\r\nimport {post} from '../../../restService/restApiCaller';\r\nimport st from '../../../data/stack'\r\n\r\n\r\nexport default function FileSystemNavigator(props) {\r\n    const [stacks, setStacks] = useState(st);\r\n    const [input, setInput] = useState({});\r\n    const [filter, setFilter] = useState(\"\");\r\n    const [filterAsProps, setFilterAsProps] = useState(\"\");\r\n\r\n    const config = open => ({\r\n        from: {height: 0, opacity: 0, transform: 'translate3d(20px,0,0)'},\r\n        to: {\r\n            height: open ? 'auto' : 0,\r\n            opacity: open ? 1 : 0,\r\n            transform: open ? 'translate3d(0px,0,0)' : 'translate3d(20px,0,0)',\r\n        },\r\n    })\r\n\r\n    function callApi() {\r\n        post({rawStackTrace :input.value, filter},\r\n            (data) => {\r\n            if(filter) setFilterAsProps(filter);\r\n            else setFilterAsProps(null);\r\n                setStacks({});\r\n                setStacks(data);\r\n            });\r\n    }\r\n\r\n    const handleChange = function (event) {\r\n        setInput({value: event.target.value});\r\n    };\r\n\r\n    const handleFilter = function (event) {\r\n        setFilter(event.target.value);\r\n    };\r\n\r\n    function filterTree() {\r\n       callApi();\r\n\r\n    }\r\n\r\n    return <span>\r\n    <div>\r\n        <div className=\"d-md-flex h-md-50 align-items-center scrollable\">\r\n            <div className=\"col-md-3 p-0 bg-indigo h-md-100\">\r\n                <div>\r\n                    <textarea value={input.value} onChange={handleChange} rows={20}\r\n                              id=\"stackTrace\" className={\"textarea\"}/>\r\n                        <button className={\"prettify-button\"} onClick={callApi}>Prettify</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-9 p-0  h-md-100 scrollable dark-background\">\r\n                <div className=\"filter col-md-6\">\r\n                    <div className={\"input-group mb-3\"}>\r\n                    <input type=\"text\" placeholder=\"filter by package / or class name\"\r\n                           className=\"form-control\"\r\n                           onChange={handleFilter}/>\r\n                    <div className={\"input-group-prepend\"}>\r\n                        <button onClick={filterTree} className={\"btn btn-primary\"}> filter </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"d-md-flex p-4\">\r\n                <Tree open visible content=\"Stack trace\" springConfig={config}>\r\n                    <StackTrace trace={stacks} filter={filterAsProps}/>\r\n                </Tree>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n</span>\r\n\r\n}\r\n","export function post(input, callback) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        body: JSON.stringify(input),\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8',\r\n            'Access-Control-Allow-Origin' :'*',\r\n            'Access-Control-Allow-Headers': 'X-Requested-With'\r\n        }\r\n    };\r\n\r\n   return  fetch('http://51.222.106.8:8080/prettify', requestOptions)\r\n       .then(res => res.json())\r\n       .then(data => callback(data))\r\n\r\n}\r\n","import React from 'react';\nimport StackTraceTreeView from \"./components/Stack/tree\";\n\n\nimport './App.css';\n\nfunction App() {\n\n    return <StackTraceTreeView/>\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}